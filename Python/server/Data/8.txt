
Stack Overflow

    Questions
    Developer Jobs
    Tags
    Users

49
●1●6

Congratulations Jon Skeet, and thanks a million! »
Undoing a git rebase
Ask Question
up vote
2190
down vote
favorite
808


Does anybody know how to easily undo a git rebase?

The only way that comes to mind is to go at it manually:

    git checkout the commit parent to both of the branches
    then create a temp branch from there
    cherry-pick all commits by hand
    replace the branch in which I rebased by the manually-created branch

In my current situation this is gonna work because I can easily spot commits from both branches (one was my stuff, the other was my colleague's stuff).

However my approach strikes me as suboptimal and error-prone (let's say I had just rebased with 2 of my own branches).

Any ideas?

Clarification: I'm talking about a rebase during which a bunch of commits were replayed. Not only one.
git rebase git-rebase undo
shareeditflag

edited Jul 21 '14 at 23:43
user456814

asked Sep 25 '08 at 17:59
webmat
23.3k124854

5


ALso note that during a rebase you can exclude commits, or squash them; these changes are not revertable without either a pointer to the original nodes or sifting through the reflog, so the cherrypicking would not work. – ANeves Dec 21 '11 at 10:47
2


stackoverflow.com/a/692763/2458438 This should ideally be the accepted answer. – DDM Dec 14 '16 at 11:22
add a comment
14 Answers
active
oldest
votes
up vote
3035
down vote
accepted


The easiest way would be to find the head commit of the branch as it was immediately before the rebase started in the reflog...

git reflog

and to reset the current branch to it (with the usual caveats about being absolutely sure before reseting with the --hard option).

Suppose the old commit was HEAD@{5} in the ref log:

git reset --hard HEAD@{5}

In Windows, you may need to quote the reference:

git reset --hard "HEAD@{5}"

You can check the history of the candidate old head by just doing a git log HEAD@{5} (Windows: git log "HEAD@{5}").

If you've not disabled per branch reflogs you should be able to simply do git reflog branchname@{1} as a rebase detaches the branch head before reattaching to the final head. I would double check this, though as I haven't verified this recently.

Per default, all reflogs are activated for non-bare repositories:

[core]
    logAllRefUpdates = true

shareeditflag

edited Oct 20 '16 at 3:32
Cristian Ciupitu
12.3k43757

answered Sep 25 '08 at 19:56
Charles Bailey
452k65521585

58


Git reflog is awesome, just remember you can get better formatted output with git log -g (tip from Scott Chacon's progit.org/book). – karmi Jul 23 '10 at 10:14
41


@Zach: git rebase --abort (-i makes no sense with --abort) is for abandoning a rebase that hasn't been completed - either because there were conflicts or because it was interactive or both; it's not about undoing a successful rebase which is what the question is about. You would either use rebase --abort or reset --hard depending on which situation you were in. You shouldn't need to do both. – Charles Bailey Jun 15 '11 at 20:40
13


Thanks! In my Git install I needed to put "HEAD{22}" in quotes for it to work. – SidJ Jul 4 '12 at 12:30
4


This did save my life...unfortunately, in my haste I did git reset --hard HEAD@{5} - which was two commits above what I wanted to do. Needless to say, Thank God for Git which allowed me to just go ahead and make that correction, after doing another git reflog and realizing the commit I wanted to go to was just moved up by 1, I quickly corrected that and all is good. =) – marcamillion Jul 10 '12 at 8:08
170


Just in case, make a backup first: git tag BACKUP. You can return to it if something goes wrong: git reset --hard BACKUP – kolypto Nov 5 '12 at 14:00
show 14 more comments
up vote
1020
down vote


Actually, rebase saves your starting point to ORIG_HEAD so this is usually as simple as:

git reset --hard ORIG_HEAD

However, the reset, rebase and merge all save your original HEAD pointer into ORIG_HEAD so, if you've done any of those commands since the rebase you're trying to undo then you'll have to use the reflog.
shareeditflag

answered Mar 28 '09 at 13:24
Pat Notz
111k277788

8


Super useful tip. This is a really quick undo for a premature or mistaken rebase. – Glenn Nov 4 '11 at 1:38
16


In case ORIG_HEAD is no longer useful, you can also use the branchName@{n} syntax, where n is the nth prior position of the branch pointer. So for example, if you rebase featureA branch onto your master branch, but you don't like the result of the rebase, then you can simply do git reset --hard featureA@{1} to reset the branch back to exactly where it was before you did the rebase. You can read more about the branch@{n} syntax at the official Git docs for revisions. – user456814 May 24 '13 at 5:17
7


This is the easiest. Follow it up with a git rebase --abort though. – Seph Sep 16 '15 at 19:24
9


This should be the accepted answer IMO. – Tomáš Fejfar Jul 26 '16 at 18:57
8


ORIG_HEAD is VERY VERY VERY useful if you just did a rebase and want to revert it in a sane & peaceful manner. It should be the TOP VOTED answer (or also the accepted answer). It needs a bump. The top voted answer that asks to do a git reset --hard HEAD@{5} involves unnecessary head counting which has more possibility of going wrong. – DDM Dec 14 '16 at 11:21
show 10 more comments
up vote
291
down vote


Charles's answer works, but you may want to do this:

git rebase --abort

to clean up after the reset.

Otherwise, you may get the message “Interactive rebase already started”.
shareeditflag

edited Jan 10 '17 at 3:12
Philip Walton
13.3k104469

answered Jul 27 '09 at 18:21
Allan
2,9841103

2


This one removed the "|REBASE" part in my prompt. +1 – Wouter Thielen Nov 25 '14 at 5:23
8


I think it should be git rebase --abort in the (depending on your version of git perhaps). – Seph Sep 16 '15 at 19:25
9


That was not the question. The question asks how to undo a finished rebase. – Arunav Sanyal Apr 4 '17 at 18:29
add a comment
up vote
70
down vote


Resetting the branch to the dangling commit object of its old tip is of course the best solution, because it restores the previous state without expending any effort. But if you happen to have lost those commits (f.ex. because you garbage-collected your repository in the meantime, or this is a fresh clone), you can always rebase the branch again. The key to this is the --onto switch.

Let’s say you had a topic branch imaginatively called topic, that you branched off master when the tip of master was the 0deadbeef commit. At some point while on the topic branch, you did git rebase master. Now you want to undo this. Here’s how:

git rebase --onto 0deadbeef master topic

This will take all commits on topic that aren’t on master and replay them on top of 0deadbeef.

With --onto, you can rearrange your history into pretty much any shape whatsoever.

Have fun. :-)
shareeditflag

edited Sep 26 '08 at 2:47

answered Sep 26 '08 at 2:08
Aristotle Pagaltzis
78.6k128688

2


I think this is the best option because of its flexibility. I branched b1 off master, then rebased b1 into a new branch b2, then wanted to revert b1 to be based on master again. I just love git - thanks! – ripper234 Aug 17 '11 at 12:59
2


This is the best option here! It kept all changes I have on my current branch, and removed all the unwanted ones! – Alicia Tang Mar 15 '16 at 20:43
add a comment
up vote
57
down vote


I actually put a backup tag on the branch before I do any nontrivial operation (most rebases are trivial, but I'd do that if it looks anywhere complex).

Then, restoring is as easy as git reset --hard BACKUP.
shareeditflag

edited May 24 '13 at 5:08
user456814

answered May 12 '09 at 20:57
Alex Gontmakher
1,034109

2


I do this too. It's also useful to git diff BACKUP..HEAD to make sure you changed what you meant to. – Paul Bone Apr 12 '11 at 7:43
4


I used to do that too, but since I got more comfortable with the reflog I no longer feel it's necessary. The reflog is essentially doing this on your behalf every time you change HEAD. – Pete Hodgson Aug 1 '12 at 19:44
4


Well, I prefer meaningful names, because searching for the right item in the reflog is sometimes not fun at all. – Alex Gontmakher Aug 2 '12 at 21:13
10


You actually don't even need to make a backup branch, you can simply use the branchName@{n} syntax, here n is the nth prior position of the branch pointer. So for example, if you rebase featureA branch onto your master branch, but you don't like the result of the rebase, then you can simply do git reset --hard featureA@{1} to reset the branch back to exactly where it was before you did the rebase. You can read more about the branch@{n} syntax at the official Git docs for revisions. – user456814 May 24 '13 at 5:12
2


Actually, you don't even need to use the syntax above, according to Pat Notz's answer, the original HEAD of the branch is temporarily stored in ORIG_HEAD. But the technique of using a backup branch label works too, it's just more steps. – user456814 May 24 '13 at 5:21
show 1 more comment
up vote
46
down vote


In case you haven't completed the rebase and in the middle of it, the following works:

git rebase --abort

shareeditflag

answered Oct 15 '14 at 20:20
Alex
6,76465472




This worked for me. I had merge conflicts so it qualified as being 'in the middle of it'. – Fakeer May 6 '16 at 23:41
add a comment
up vote
40
down vote


In case you had pushed your branch to remote repository (usually it's origin) and then you've done a succesfull rebase (without merge) (git rebase --abort gives "No rebase in progress") you can easily reset branch using command:

    git reset --hard origin/{branchName}

Example:

$ ~/work/projects/{ProjectName} $ git status
On branch {branchName}
Your branch is ahead of 'origin/{branchName}' by 135 commits.
  (use "git push" to publish your local commits)

nothing to commit, working directory clean

$ ~/work/projects/{ProjectName} $ git reset --hard origin/{branchName}
HEAD is now at 6df5719 "Commit message".

$ ~/work/projects/{ProjectName} $ git status
On branch {branchName}
Your branch is up-to-date with 'origin/{branchName}.

nothing to commit, working directory clean

shareeditflag

edited Feb 5 '16 at 10:12
Nick Roz
1,11811229

answered Sep 28 '15 at 12:43
Maksym
1,6831129

1


D'oh -- why didn't I think of this? – Scott Jun 20 '16 at 2:45



That is the correct answer for me. Rebase and commit prior to rebase had same commit ID, and going back to HEAD{1} just wouldn't revert rebase! – Bill Kotsias Aug 2 '17 at 5:34
add a comment
up vote
11
down vote


For multiple commits, remember that any commit references all the history leading up to that commit. So in Charles' answer, read "the old commit" as "the newest of the old commits". If you reset to that commit, then all the history leading up to that commit will reappear. This should do what you want.
shareeditflag

answered Sep 25 '08 at 21:36
Greg Hewgill
599k1309671122

1


True, thanks for the reminder ;-) – webmat Sep 26 '08 at 3:37
add a comment
up vote
10
down vote


Using reflog didn't work for me.

What worked for me was similar to as described here. Open the file in .git/logs/refs named after the branch that was rebased and find the line that contains "rebase finsihed", something like:

5fce6b51 88552c8f Kris Leech <me@example.com> 1329744625 +0000  rebase finished: refs/heads/integrate onto 9e460878

Checkout the second commit listed on the line.

git checkout 88552c8f

Once confirmed this contained my lost changes I branched and let out a sigh of relief.

git log
git checkout -b lost_changes

shareeditflag

answered Feb 20 '12 at 13:59
Kris
9,43455878




or this: stackoverflow.com/questions/1108853/… – cregox Jun 20 '12 at 18:52
2


Whoa -- from that link, "There is one caveat: I lost the history of the branch but in this case it didn’t really matter. I was just happy to have retrieved my changes." ? – ruffin Aug 30 '12 at 14:13
1


This just saved a few hours of work for me. Thanks! – Marcel M. May 19 '16 at 14:35
add a comment
up vote
9
down vote


Following the solution of @Allan and @Zearin, I wish I could simply do a comment though but I don't enough reputation, so I have used the following command:

Instead of doing git rebase -i --abort (note the -i) I had to simply do git rebase --abort (without the -i).

Using both -i and --abort at the same time causes Git to show me a list of usage/options.

So my previous and current branch status with this solution is:

matbhz@myPc /my/project/environment (branch-123|REBASE-i)
$ git rebase --abort

matbhz@myPc /my/project/environment (branch-123)
$

shareeditflag

answered Mar 11 '15 at 21:26
Matheus Felipe
790912

add a comment
up vote
5
down vote


If you successfully rebased against remote branch and can not git rebase --abort you still can do some tricks to save your work and don't have forced pushes. Suppose your current branch that was rebased by mistake is called your-branch and is tracking origin/your-branch

    git branch -m your-branch-rebased # rename current branch
    git checkout origin/your-branch # checkout to latest state that is known to origin
    git checkout -b your-branch
    check git log your-branch-rebased, compare to git log your-branch and define commits that are missing from your-branch
    git cherry-pick COMMIT_HASH for every commit in your-branch-rebased
    push your changes. Please aware that two local branches are associated with remote/your-branch and you should push only your-branch

shareeditflag

answered Jun 23 '16 at 9:23
Sergey P. aka azure
1,0721016




Please read the above entry, singing to the tune of “Someone Saved My Life Tonight,” by Sir Elton John. – JaredH Feb 6 '17 at 23:16
add a comment
up vote
3
down vote


Let's say I rebase master to my feature branch and I get 30 new commits which break something. I've found that often it's easiest to just remove the bad commits.

git rebase -i HEAD~31

Interactive rebase for the last 31 commits (it doesn't hurt if you pick way too many).

Simply take the commits that you want to get rid of and mark them with "d" instead of "pick". Now the commits are deleted effectively undoing the rebase (if you remove only the commits you just got when rebasing).
shareeditflag

answered Feb 9 '17 at 12:25
Hardev
1,9641913

add a comment
up vote
-1
down vote


If you mess something up within a git rebase, e.g. git rebase --abort, while you have uncommited files, they will be lost and git reflog will not help. This happened to me and you will need to think outside the box here. If you are lucky like me and use IntelliJ Webstorm you can right-click->local history and can revert to a previous state of your file/folders no matter what mistakes you have done with versioning software. It is always good to have another failsafe running.
shareeditflag

answered Mar 9 '16 at 9:19
nottinhill
5,94333888

1


git rebase --abort aborts an active rebase, it doesn't undo a rebase. Also, using two VCS's at the same time is a bad idea. Its a nice feature in Jetbrains software but you shouldn't use both. It's better to just learn Git, particularly when answering questions on Stack Overflow that are about Git. – dudewad May 15 '17 at 17:56
add a comment
up vote
-7
down vote


In order to cancel, you may enter the following command:

git -c core.quotepath=false rebase --abort

shareeditflag

edited Mar 15 '16 at 5:31
haihui
89311319

answered Mar 15 '16 at 4:27
Kostya Andreev
1

1


This doesn't add anything to Allan or Alex's answer, and it's actually confusing because core.quotepath has nothing to do with undoing the rebase. – nneonneo Mar 15 '16 at 5:35
add a comment
Your Answer

        Links Images Styling/Headers Lists Blockquotes Code HTML
        advanced help »


community wiki
Not the answer you're looking for? Browse other questions tagged git rebase git-rebase undo or ask your own question.

asked


9 years, 4 months ago

viewed


581,750 times

active


11 months ago
Blog
Remote Work in the 2017 Developer Survey

Featured on Meta
What criteria should we use to determine which review queue indicator a site…

Take the 2018 Developer Survey

Hot Meta Posts
22
How to get all the images posted by me?

8
Split off [windows-sdk] from [winapi]

Want a python job?

    Full Stack Developer (Python / Django)
    SherpanyNo office location
    Remote
    pythondjango
    Software Engineer (Product Development)
    BriteCoreSpringfield, MO
    $50k - $70k
    Remote
    pythonjavascript
    Full Stack Engineer - Build the smartest way to buy a car (Remote)
    Unhaggle Inc.No office location
    Remote
    pythonjavascript
    Support Engineer
    ScrapinghubNo office location
    Remote
    pythonlinux

Linked
16
Did i just destroy my work by incorrectly using git rebase
1
rebase branch to master recovery
0
How to “undo” rebasing commits
0
git: How do I undo a rebase in this case?
425
Undoing a 'git push'
48
Recovering added file after doing git reset --hard HEAD^
50
Aborted old git rebase and lost commits since the rebase started
22
Undo Git Rebase
19
Reverting an interactive git rebase
20
I've just deleted one week of work! How to undo git rm -r --cached?
see more linked questions…
Related
3506
How do I discard unstaged changes in Git?
5246
How to remove local (untracked) files from the current Git working tree?
9231
What is the difference between 'git pull' and 'git fetch'?
6822
How to undo 'git add' before commit?
16350
How to undo the most recent commits in Git?
2368
Delete commits from a branch in Git
12430
How do I delete a Git branch both locally and remotely?
2765
Undo a Git merge that hasn't been pushed yet
5348
How to revert Git repository to a previous commit?
6019
How do I rename a local Git branch?
Hot Network Questions

    Do dragons (and dragonborn) naturally shed or molt scales?
    Speed of light in a black hole
    My student's family won't let her study what she wants
    Setting flag in a loop to use it later, a code smell?
    Counting the number of 1 bits in a sorted bit array
    When does a 'flaps/slats misconfiguration' warning sound during takeoff roll?
    Do class spells take up spell slots?
    Binary Substrings
    Why does Linux network traffic only go through eth0?
    What method do I use to pay current expenses while paying off CC debt?
    My visa application to UK got refused three times; what are my options?
    Why does FindDistribution give nonrepeatable results for fit parameters?
    If a topological space is homeomorphic to a smooth manifold, then will it be a smooth manifold?
    Olympic Rings Sequence
    How to tell a friend that his indifference is hurting my feelings?
    Why does my baggage need to go through X-ray to go out of the airport in Panama City?
    How to parse "It's not about you"
    Find the Missing Numbers in the Fibonacci Sequence Mod K
    White to play and checkmate in two moves
    Can (a ==1 && a== 2 && a==3) ever evaluate to true?
    How can a TA help a student who is certain she sucks at programming?
    Does saying "sorry" after an accident count as legal admission of fault?
    What was ejected from RocketLab's Electron launch vehicle at T+6:25 during stage two burn?
    Simplifying many window comparators

question feed
Stack Overflow

    Questions
    Jobs
    Developer Jobs Directory
    Salary Calculator
    Help
    Mobile

Stack Overflow
Business

    Talent
    Ads
    Enterprise

Company

    About
    Press
    Work Here
    Legal
    Privacy Policy
    Contact Us

Stack Exchange
Network

    Technology
    Life / Arts
    Culture / Recreation
    Science
    Other

    Stack Overflow
    Server Fault
    Super User
    Web Applications
    Ask Ubuntu
    Webmasters
    Game Development

    TeX - LaTeX
    Software Engineering
    Unix & Linux
    Ask Different (Apple)
    WordPress Development
    Geographic Information Systems
    Electrical Engineering

    Android Enthusiasts
    Information Security
    Database Administrators
    Drupal Answers
    SharePoint
    User Experience
    Mathematica

    Salesforce
    ExpressionEngine® Answers
    Stack Overflow em Português
    Blender
    Network Engineering
    Cryptography
    Code Review

    Magento
    Software Recommendations
    Signal Processing
    Emacs
    Raspberry Pi
    Stack Overflow на русском
    Programming Puzzles & Code Golf

    Stack Overflow en español
    Ethereum
    Data Science
    Arduino
    Bitcoin
    more (26)

    Photography
    Science Fiction & Fantasy
    Graphic Design
    Movies & TV
    Music: Practice & Theory
    Worldbuilding
    Seasoned Advice (cooking)

    Home Improvement
    Personal Finance & Money
    Academia
    Law
    more (16)

    English Language & Usage
    Skeptics
    Mi Yodeya (Judaism)
    Travel
    Christianity
    English Language Learners
    Japanese Language

    Arqade (gaming)
    Bicycles
    Role-playing Games
    Anime & Manga
    Puzzling
    Motor Vehicle Maintenance & Repair
    more (32)

    MathOverflow
    Mathematics
    Cross Validated (stats)
    Theoretical Computer Science
    Physics
    Chemistry
    Biology

    Computer Science
    Philosophy
    more (10)

    Meta Stack Exchange
    Stack Apps
    API
    Data
    Area 51

    Blog Facebook Twitter LinkedIn

site design / logo © 2018 Stack Exchange Inc; user contributions licensed under cc by-sa 3.0 with attribution required. rev 2018.1.22.28507
